lamb<-5/94.32
lamb+c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
1
2
library(ggplot2)
library(datasets)
data(ToothGrowth)
str(ToothGrowth)
ggplot(ToothGrowth,aes(x=factor(dose),y=len,fill=factor(dose)))+
geom_bar(stat="identity") +
facet_grid(.~supp) +
scale_x_discrete("Dosage (Milligram)") +
scale_y_continuous("Length of Teeth") +
ggtitle("Exploratory Data Analyses")
supp.t1 <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
supp.t1supp.t2 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
supp.result <- data.frame("p-value"=c(supp.t1$p.value, supp.t2$p.value),
"Conf-Low"=c(supp.t1$conf[1],supp.t2$conf[1]),
"Conf-High"=c(supp.t1$conf[2],supp.t2$conf[2]),
row.names=c("Equal Var","Unequal Var"))
supp.result
supp.t1 <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
supp.t2 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
supp.result <- data.frame("p-value"=c(supp.t1$p.value, supp.t2$p.value),
"Conf-Low"=c(supp.t1$conf[1],supp.t2$conf[1]),
"Conf-High"=c(supp.t1$conf[2],supp.t2$conf[2]),
row.names=c("Equal Var","Unequal Var"))
supp.result
len~supp
View(ToothGrowth)
View(ToothGrowth)
rbind(
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==0.5,])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==1,])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==2,])
)
rbind(
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==0.5,])$p.value,
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==1,])$p.value,
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==2,])$p.value
)
data<-ToothGrowth
rbind(
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==0.5,])$p.value,
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==1,])$p.value,
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==2,])$p.value
)
data_05_1 <- subset(data, dose %in% c(0.5,1))
data_1_2 <- subset(data, dose %in% c(1,2))
rbind(
t.test(len ~ dose, paired=F, var.equal=F, data=data_05_1)
t.test(len ~ dose, paired=F, var.equal=F, data=data_1_2)
)
rbind(
t.test(len ~ dose, paired=F, var.equal=F, data=data_05_1)$p.value,
t.test(len ~ dose, paired=F, var.equal=F, data=data_1_2)$p.value
)
rbind(
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==0.5,])$conf,
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==1,])$conf,
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==2,])$conf
)
data(mtcars)
str(mtcars)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
str(mtcars)
help(mtcars)
str(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, labels=c('V-Engine','Straight'))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
scatterplot.matrix(~mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear +
carb, data = mtcars, main = "Plot 1: Scatterplot Matrix")
library(car)
install(car)
install.packages(car)
install.packages("car")
library(car)
scatterplot.matrix(~mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear +
carb, data = mtcars, main = "Plot 1: Scatterplot Matrix")
scatterplotMatrix(~mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear +
carb, data = mtcars, main = "Plot 1: Scatterplot Matrix")
scatterplotMatrix(~mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear +
carb, data = mtcars, main = "Plot 1: Scatterplot Matrix")
```{r,warning=TRUE}
library(car)
```
boxplot(mpg ~ am, data = mtcars, main = "Plot 3: Miles per gallon by Transmission type",
xlab = "Transmission type", ylab = "Miles Per Gallon")
pairs(mtcars, panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel)
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
anova(fullModel,stepModel)
scatterplotMatrix(~mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear +
carb, data = mtcars, main = "Plot 1: Scatterplot Matrix")
par(mfrow=c(2, 2))
plot(stepModel)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, labels=c('V-Engine','Straight'))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
options(warn=-1)
compare<-aov(mpg~., data=mtcars)
compare
cor(mtcars)
library(xtables)
library(xtable)
install.packages("xtable")
library(xtable)
xtable(compare)
xtable(compare, type=html)
xtable(compare, type="html")
View(compare)
print(xtable(compare), type="html")
?xtable
print(xtable(compare))
print(compare)
?aov
summary(compare)
corr <- cor(mtcars)
summary(corr)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel)
corr<-cor(mtcars)
data(mtcars)
data(mtcars)
corr<-cor(mtcars)
summary(corr)
corr<-cor(mtcars)
corr
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:cyl, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + cyl, data=mtcars)
summary(amIntWtModel)
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, labels=c('V-Engine','Straight'))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
options(warn=-1)
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:cyl, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + cyl, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + cyl, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + qsec:am, data=mtcars)
summary(amIntWtModel)
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:disp, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:cyl, data=mtcars)
summary(amIntWtModel)
library(car)
scatterplotMatrix(~mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear +
carb, data = mtcars, main = "Plot 1: Scatterplot Matrix")
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:qsec, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + qsec:am, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am + qsec:am, data=mtcars)
summary(amIntWtModel)
Model1<-lm(mpg ~ wt + qsec + am + wt:am + qsec:am +qsec:wt, data=mtcars)
summary(Model1)
Model3<-lm(mpg ~ wt + qsec + am + qsec:wt + wt:am, data=mtcars)
summary(Model3)
?mtcars
Model1<-lm(mpg ~ wt + qsec + am + wt:am + qsec:am +qsec:wt, data=mtcars)
summary(Model1)
Model4<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(Model4)
Model4<-lm(mpg ~ wt + qsec + am + wt*am, data=mtcars)
summary(Model4)
Model4<-lm(mpg ~ wt + qsec + am + wt*am, data=mtcars)
summary(Model4)
Model4<-lm(mpg ~ qsec + wt*am, data=mtcars)
summary(Model4)
Model2<-lm(mpg ~ qsec*am + wt, data=mtcars)
summary(Model2)
summary(Model2)
Model3<-lm(mpg ~ qsec*wt + am, data=mtcars)
summary(Model3)
Model4<-lm(mpg ~ qsec*wt*am, data=mtcars)
summary(Model4)
Model1<-lm(mpg ~ qsec + wt*am, data=mtcars)
summary(Model1)
summary(Model1)$coeff
anova(fullModel,stepModel,Model1)
Model2<-lm(mpg ~ qsec*am + wt, data=mtcars)
Model3<-lm(mpg ~ qsec*wt + am, data=mtcars)
Model4<-lm(mpg ~ qsec*wt*am, data=mtcars)
anova(fullModel,stepModel,Model1,Model2,Model3,Model4)
par(mfrow=c(2, 2))
plot(Model1)
summary(Model1)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ggplot(data = mtcars, aes(y = mpg, x = am)) +
geom_boxplot(aes(fill = am)) +
geom_jitter(aes(color = wt), size=4) +
ggtitle("Plot 2: Miles per gallon by Transmission type")+
theme_bw()
View(mtcars)
View(mtcars)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, labels=c('V-Engine','Straight'))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
View(mtcars)
View(mtcars)
corr
corr<-cor(mtcars)
data(mtcars)
corr<-cor(mtcars)
corr
diag(corr)<-0
diag(corr)<-0
corr
plot(mtcars$cyl,mtcars$disp)
boxplot(mtcars$cyl,mtcars$disp)
plot(mtcars$cyl,mtcars$disp)
library(ggplot2)
ggplot(data = mtcars, aes(y = cyl, x = disp)) +
geom_boxplot(aes(fill = as.factor(am))) +
geom_jitter() +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = cyl, x = disp)) +
##geom_boxplot(aes(fill = as.factor(am))) +
geom_jitter() +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = cyl, x = disp)) +
##geom_boxplot(aes(fill = as.factor(am))) +
geom_jitter() +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot() +
geom_jitter() +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter() +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt, size=4)) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt, size=8)) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt, size=85)) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt), size =4) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt), size =8) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt), size =6) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
ggplot(data = mtcars, aes(y = disp, x = cyl)) +
geom_boxplot(aes(fill = as.factor(cyl))) +
geom_jitter(aes(color = wt), size =4) +
ggtitle("Plot 2: Cyl vs Disp")+
theme_bw()
View(corr)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
setwd("C:/Users/user/Desktop/Coursera/Reproducible")
#Load the data (i.e. read.csv())
df <- read.csv("activity.csv")
#Process/transform the data (if necessary) into a format suitable for your analysis
df$date <- as.Date(df$date)
setwd("C:/Users/user/Desktop/Coursera/RepData_PeerAssessment1-master/RepData_PeerAssessment1-master")
#Load the data (i.e. read.csv())
df <- read.csv("activity.csv")
#Process/transform the data (if necessary) into a format suitable for your analysis
df$date <- as.Date(df$date)
df
View(df)
total.steps.by.day <- aggregate(x = df$steps , by = list(df$date), FUN = sum ,na.rm=TRUE)
total.steps.by.day
gen_hist = function(x, title){
hist(x,
breaks = 20,
main = title,
xlab = 'Total Number of Steps', col = 'grey',
cex.main = .9)
#caluclate mean and median
mean_value = round(mean(x), 1)
median_value = round(median(x), 1)
#place lines for mean and median on histogram
abline(v=mean_value, lwd = 3, col = 'blue')
abline(v=median_value, lwd = 3, col = 'red')
#create legend
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
}
gen_hist(dat_tbl_summary$total_steps, 'Number of Steps Taken Per Day')
library(data.table)
dat_tbl = data.table(dat)
dat_tbl_summary = dat_tbl[, list(total_steps = sum(steps, na.rm = T)),
by = date]
dat = read.csv('activity.csv', header = T)
names(dat)
str(dat)
head(dat)
```{r}
library(data.table)
dat_tbl = data.table(dat)
dat_tbl_summary = dat_tbl[, list(total_steps = sum(steps, na.rm = T)),
by = date]
```
gen_hist = function(x, title){
hist(x,
breaks = 20,
main = title,
xlab = 'Total Number of Steps', col = 'grey',
cex.main = .9)
#caluclate mean and median
mean_value = round(mean(x), 1)
median_value = round(median(x), 1)
#place lines for mean and median on histogram
abline(v=mean_value, lwd = 3, col = 'blue')
abline(v=median_value, lwd = 3, col = 'red')
#create legend
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
}
gen_hist(dat_tbl_summary$total_steps, 'Number of Steps Taken Per Day')
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
abline(v=mean(total.steps.by.day$steps , na.rm = TRUE), lwd = 3, col = 'blue')
histplot
library(ggplot2)
total.steps.by.day <- aggregate(x = df$steps , by = list(df$date), FUN = sum ,na.rm=TRUE)
names(total.steps.by.day) <- c("date","steps")
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
abline(v=mean(total.steps.by.day$steps , na.rm = TRUE), lwd = 3, col = 'blue')
histplot
#mean total number of steps taken per day
mean(total.steps.by.day$steps , na.rm = TRUE)
#median total number of steps taken per day
median(total.steps.by.day$steps , na.rm = TRUE)
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
geom_vline(xintercept=mean(total.steps.by.day$steps , na.rm = TRUE))
mean(total.steps.by.day$steps , na.rm = TRUE)
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
geom_vline(xintercept=mean(total.steps.by.day$steps , na.rm = TRUE),colour="red")
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
geom_vline(xintercept=mean(total.steps.by.day$steps , na.rm = TRUE),colour="red",size=5)
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
geom_vline(xintercept=mean(total.steps.by.day$steps , na.rm = TRUE),colour="red",size=5)
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
geom_vline(xintercept=mean(total.steps.by.day$steps , na.rm = TRUE),colour="red",size=500)
istplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
geom_vline(10000,colour="red")
geom_vline(xintercept=10000,colour="red",size=500)
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
geom_vline(xintercept=10000,colour="red",size=500)
histplot
geom_vline(xintercept=10000,colour="red")
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
geom_vline(xintercept=10000,colour="red")
histplot
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
geom_vline(xintercept=mean(total.steps.by.day$steps , na.rm = TRUE),colour="red")
histplot
geom_vline(xintercept=median(total.steps.by.day$steps , na.rm = TRUE) , na.rm = TRUE),colour="blue")
names(total.steps.by.day) <- c("date","steps")
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
geom_vline(xintercept=mean(total.steps.by.day$steps , na.rm = TRUE),colour="red")
geom_vline(xintercept=median(total.steps.by.day$steps , na.rm = TRUE) , na.rm = TRUE),colour="blue")
histplot
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
geom_vline(xintercept=mean(total.steps.by.day$steps , na.rm = TRUE),colour="red")+
geom_vline(xintercept=median(total.steps.by.day$steps , na.rm = TRUE) , na.rm = TRUE),colour="blue")
histplot
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000) +
geom_vline(xintercept=mean(total.steps.by.day$steps , na.rm = TRUE),colour="red") +
geom_vline(xintercept=median(total.steps.by.day$steps , na.rm = TRUE),colour="blue")
histplot
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(colour = "darkgreen", fill = "white",binwidth = 2000) +
geom_vline(xintercept=mean(total.steps.by.day$steps , na.rm = TRUE),colour="red") +
geom_vline(xintercept=median(total.steps.by.day$steps , na.rm = TRUE),colour="blue")
histplot
